name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: cacheclip
            asset_name: cacheclip-${{ github.ref_name }}-x86_64-linux.tar.gz
            cross: false

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: cacheclip
            asset_name: cacheclip-${{ github.ref_name }}-arm64-linux.tar.gz
            cross: true

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: cacheclip
            asset_name: cacheclip-${{ github.ref_name }}-x86_64-macos.tar.gz
            cross: false

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: cacheclip
            asset_name: cacheclip-${{ github.ref_name }}-arm64-macos.tar.gz
            cross: false

          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: cacheclip.exe
            asset_name: cacheclip-${{ github.ref_name }}-x86_64-windows.zip
            cross: false

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: cacheclip.exe
            asset_name: cacheclip-${{ github.ref_name }}-arm64-windows.zip
            cross: false

    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.cross == false
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libx11-dev \
            python3 \
            python3-pip

      - name: Build with Docker (aarch64 Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.cross == true
        run: |
          # Create target directory
          mkdir -p target/aarch64-unknown-linux-gnu/release

          # Create a Dockerfile for cross-compilation
          cat > Dockerfile.cross << 'EOF'
          FROM rust:latest

          # Add ARM64 architecture support and install cross-compilation tools and Python
          RUN dpkg --add-architecture arm64 && \
              apt-get update && apt-get install -y \
              gcc-aarch64-linux-gnu \
              g++-aarch64-linux-gnu \
              libxcb1-dev \
              libxcb-render0-dev \
              libxcb-shape0-dev \
              libxcb-xfixes0-dev \
              libx11-dev \
              wget \
              build-essential \
              zlib1g-dev \
              libncurses5-dev \
              libgdbm-dev \
              libnss3-dev \
              libssl-dev \
              libreadline-dev \
              libffi-dev \
              libsqlite3-dev \
              pkg-config \
              libxcb1-dev:arm64 \
              libxcb-render0-dev:arm64 \
              libxcb-shape0-dev:arm64 \
              libxcb-xfixes0-dev:arm64 \
              libx11-dev:arm64

          # Install Python 3.9 from source
          RUN cd /tmp && \
              wget https://www.python.org/ftp/python/3.9.18/Python-3.9.18.tgz && \
              tar -xf Python-3.9.18.tgz && \
              cd Python-3.9.18 && \
              ./configure --enable-optimizations && \
              make -j $(nproc) && \
              make install && \
              cd .. && \
              rm -rf Python-3.9.18 Python-3.9.18.tgz

          # Verify Python installation
          RUN python3 --version && \
              which python3

          # Set up cross-compilation environment
          ENV CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          ENV CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
          ENV AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
          ENV CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          ENV PKG_CONFIG_ALLOW_CROSS=1
          ENV PKG_CONFIG_ALLOW_CROSS_AARCH64_UNKNOWN_LINUX_GNU=1
          ENV PKG_CONFIG_PATH_aarch64_unknown_linux_gnu=/usr/lib/aarch64-linux-gnu/pkgconfig

          # Add the target
          RUN rustup target add aarch64-unknown-linux-gnu

          # Set the working directory
          WORKDIR /build

          # Copy the source code
          COPY . .

          # Build the project
          RUN cargo build --release --target aarch64-unknown-linux-gnu

          # The output will be in /build/target/aarch64-unknown-linux-gnu/release/cacheclip
          EOF

          # Build the Docker image
          docker build -t cross-build -f Dockerfile.cross .

          # Create a container and copy the binary
          docker create --name cross-build-container cross-build
          docker cp cross-build-container:/build/target/aarch64-unknown-linux-gnu/release/cacheclip ./target/aarch64-unknown-linux-gnu/release/
          docker rm cross-build-container

      - name: Build with cargo (non-cross)
        if: matrix.cross == false
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Create archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          tar -C target/${{ matrix.target }}/release -czf ${{ matrix.asset_name }} ${{ matrix.artifact_name }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path target/${{ matrix.target }}/release/${{ matrix.artifact_name }} -DestinationPath ${{ matrix.asset_name }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
